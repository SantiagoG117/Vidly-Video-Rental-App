using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using AutoMapper;
using Vidly_Video_Rental_App.Dtos;
using Vidly_Video_Rental_App.Models;

namespace Vidly_Video_Rental_App.Controllers.Api
{
    /// <summary>
    /// This API was designed to be as stable and decoupled as possible. Instead of receiving or returning domain model
    /// objects, this API works with DTO objects.
    ///
    /// DTO reduce the chances of breaking the API as we refactor our domain models and prevents our API from working
    /// with implementation details that are prone to change frequently, which could affect existing clients that
    /// are dependent on the domain model objects
    /// 
    /// The actions in this API controller return an object of type IHttpActionResult, which is used for building
    /// HTTP responses from Web API controllers. The purpose of this interface is to provide a more flexible
    /// way to return HTTP responses from our Web API actions that also follow the RESTful conventions.
    /// </summary>
    /// 
    public class MoviesController : ApiController
    {
        //Access to the database
        private ApplicationDbContext _context;

        public MoviesController()
        {
            _context = new ApplicationDbContext();
        }

        protected override void Dispose(bool disposing)
        {
            _context.Dispose();
        }

        /// <summary>
        /// Responds to /api/movies
        /// </summary>
        /// <param name="query">Optional parameter. Typeahead plugin will send the '%QUERY' parameter here</param>
        /// <returns>List of MovieDTO objects</returns>
        [HttpGet]
        public IHttpActionResult GetMovies(string query = null)
        {
           //Get the collection of Movies with its genres
           var moviesQuery = _context.Movies
               .Include(m => m.Genre) //Eager load the Genres
               .Where(m => m.NumberAvailable > 0); //Return the movies with available copies for rental

           //If there is a query, apply the filter to the collection of movies to be displayed in the typeahead list:
           if (!String.IsNullOrWhiteSpace(query))
               //C# equivalent of: SELECT* FROM moviesQuery WHERE query = Name
               moviesQuery = moviesQuery.Where(m => m.Name.Contains(query));
           

           //Execute the query through toList():
           var moviesDtos= moviesQuery
                .ToList() //Get a list of the movies in the Database
                .Select(Mapper.Map<Movie, MovieDTO>); //Map each Movie to MovieDTO

           //Return the result of the query
           return Ok(moviesDtos);
        }


        /// <summary>
        /// Responds to DELETE api/movies/id
        /// </summary>
        /// <param name="id"></param>
        [Authorize(Roles = RoleName.CanManageMovies)]
        [HttpDelete]
        public void DeleteMovie(int id)
        {
            //Get the movie the client wishes to delete
            var movie = _context.Movies.SingleOrDefault(m => m.Id == id);

            //Validate that the movie exist
            if (movie == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            //Remove the movie from the database
            _context.Movies.Remove(movie);
            _context.SaveChanges();
        }


        /// <summary>
        /// Responds to GET /api/movies/id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public IHttpActionResult GetMovie(int id)
        {
            //Get the movie from the database
            var movie = _context.Movies.SingleOrDefault(m => m.Id == id);

            //Validate if the movie exists
            if (movie == null)
                return NotFound();

            return Ok(Mapper.Map<Movie, MovieDTO>(movie));
        }

        /// <summary>
        /// Responds to api/movie
        /// </summary>
        /// <param name="movieDTO">Will be in the request body and ASP.NET framework will automatically initialize it</param>
        /// <returns>URI of the client request with the movie id and DTO object</returns>
        [HttpPost]
        public IHttpActionResult CreateMovie(MovieDTO movieDTO)
        {
            //Validate the state of the movie object
            if (!ModelState.IsValid)
                return BadRequest();

            //Assign the Genre to the DTO object

            //Map the MovieDTO to a Movie object
            var movie = Mapper.Map<MovieDTO, Movie>(movieDTO);

            //Add the movie to the database
            _context.Movies.Add(movie);
            _context.SaveChanges();

            //Add the movie id generated by the server to the DTO object 
            movieDTO.Id = movie.Id;


            // Returns the Unified Resource Identifier (URI) of the newly created resource to the client:
            // /api/movies/movieID
            return Created(new Uri(Request.RequestUri + //URI of the current client request
                                   "/" + movie.Id) //ID of the newly create movie 
                , movieDTO); //Return the DTO object
        }

        /// <summary>
        /// Responds to PUT /api/movies/id
        /// </summary>
        /// <param name="id"></param>
        /// <param name="movieDTO"></param>
        /// <exception cref="HttpResponseException"></exception>
        [HttpPut]
        public void UpdateMovie(int id, MovieDTO movieDTO)
        {
            //Validate the state of the DTO object
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);

            //Get the movie object from the database
            var dbMovie = _context.Movies.SingleOrDefault(m => m.Id == id);

            //Validate if the movie object exists
            if (dbMovie == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            /*
             * Map the properties of the movieDTO to the existing object dbMovie,
             * updating the movie on the database
             */
            Mapper.Map(movieDTO, dbMovie);

            //Save the changes to the database
            _context.SaveChanges();
        }


    }
}

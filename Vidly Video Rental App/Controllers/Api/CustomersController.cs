using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using AutoMapper;
using Vidly_Video_Rental_App.Dtos;
using Vidly_Video_Rental_App.Models;

namespace Vidly_Video_Rental_App.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        protected override void Dispose(bool disposing)
        {
            _context.Dispose();
        }

        /// <summary>
        /// Responds to GET /api/customers
        /// </summary>
        /// <param name="query">Optional parameter. Typeahead plug in will send the '%QUERY' parameter here</param>
        /// <returns>List of CustomeDTO</returns>
        [HttpGet]
        public IHttpActionResult GetCustomers(string query = null)
        {

            //Get the data we need:
            var customersQuery = _context.Customers //Get the customers from the Database
                .Include(c => c.MembershipType);//Eager load the Membership types

            //If there is a query, apply the filter to the collection of customers to be displayed in the typeahead list:
            if (!String.IsNullOrWhiteSpace(query))
                //This code is the C# equivalent of: SELECT* FROM customersQuery WHERE query = Name)
                customersQuery = customersQuery.Where(c => c.Name.Contains(query));
            

            //Execute the query through ToList():    
            var customerDtos = customersQuery    
                .ToList()//Convert the outcome to a List
                .Select(Mapper.Map<Customer, CustomerDTO>);//Map Customer objects to CustomerDTO objects

            //Return  the result of the query
            return Ok(customerDtos);
        }

        /// <summary>
        /// Responds to DELETE api/customers/id
        /// </summary>
        /// <param name="id"></param>
        [HttpDelete]
        public void DeleteCustomer(int id)
        {
            //Get the customer we wish to delete from the database
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customer == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            //Delete the customer and save the changes in the Database.
            _context.Customers.Remove(customer);
            _context.SaveChanges();

        }

        /// <summary>
        /// Responds to GET /api/customers/id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customer == null)
                return NotFound();


            return Ok(Mapper.Map<Customer, CustomerDTO>(customer));
        }

        /// <summary>
        /// Responds to POST /api/customers
        /// </summary>
        /// <param name="customerDto">Will be in the request body and ASP.NET framework will automatically initialize it</param>
        /// <returns>URI of the client request with the customer id and the DTO object</returns>

        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDTO customerDto)
        {
            //Validate the customer object
            if (!ModelState.IsValid)
                return BadRequest();

            //Map the CustomerDTO object back to the domain object
            var customer = Mapper.Map<CustomerDTO, Customer>(customerDto);

            //Add the customer to the database
            _context.Customers.Add(customer);
            _context.SaveChanges();

            //Add the customer id generated by the database to the DTO object and return it to the client
            customerDto.Id = customer.Id;

            // Returns the Unified Resource Identifier (URI) of the newly created resource to the client:
            // /api/customers/customerID
            return Created(new Uri(Request.RequestUri + //URI of the current client request
                                   "/" + customer.Id) //ID of the newly created customer
                , customerDto); //Return the DTO object
        }

        /// <summary>
        /// Responds to PUT /api/customers
        /// </summary>
        /// <param name="id">Read from the URL</param>
        /// <param name="customerDTO">Comes in the PUT request body</param>
        /// <exception cref="HttpResponseException"></exception>
        /// 
        [HttpPut] //Action will only be created if we send an Http PUT request
        public void UpdateCustomer(int id, CustomerDTO customerDTO)
        {
            //Validate the customer object
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);


            //Get the customer with the id send as an argument
            var dbCustomer = _context.Customers.SingleOrDefault(c => c.Id == id);


            //Validate that the customer exists
            if (dbCustomer == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            /*
             * Map the properties of customerDTO to the existing object dbCustomer,
             * updating the customer in the database
             */
            Mapper.Map(customerDTO, dbCustomer);


            //Save the changes to the database
            _context.SaveChanges();
        }

    }
}
